"""
Random_art.py

@author: bchiou, adapted from amonmillner, adapted from pruvolo work
"""

# you do not have to use these particular modules, but they may help
from random import randint
from math import sin, cos, pi
from PIL import Image



def prod(x,y):
    return x * y

def build_random_function(min_depth, max_depth):
    """ takes in min_depth and max_depth
        min_depth sets the minimum "layers" of nesting
        max_depth sets the maximum "layers" of nesting
    """
    
    if (min_depth <= 0 and randint(0,1) == 0)or max_depth == 0:
        r1 = randint(0,1)       
        xoy = ["x","y"]
        return xoy[r1]        
    else: 
        r2 = randint(0,2)
        func = [sin, cos, prod]
        if r2 == 2:
            return [prod, build_random_function(min_depth - 1, max_depth - 1), build_random_function(min_depth - 1, max_depth - 1)]
        else:   
            return [func[r2], build_random_function(min_depth-1, max_depth - 1)]

def evaluate_random_function(f, x, y):
    """ takes in f, x, y
        f is generated by build_random_function
        x is base-case value "x" of build_random_function
        y is base-case value "y" of build_random_function
        [cos[cos[sin("x")]]]
    """
    if len(f) == 1:
        if f[0] == "x":
            return x
        else:
            return y
        
    elif f[0] != prod:
        return f[0](evaluate_random_function(f[1], x, y))
    else:
        return evaluate_random_function(f[1], x, y)*evaluate_random_function(f[2], x, y)


def remap_interval(val, input_interval_start, input_interval_end, output_interval_start, output_interval_end):
    """ Maps the input value that is in the interval [input_interval_start, input_interval_end]
        to the output interval [output_interval_start, output_interval_end].  The mapping
        is an affine one (i.e. output = input*c + b).
    
        TODO: please fill out the rest of this docstring
    """
    return (float(val - input_interval_start) / (input_interval_end - input_interval_start)*(output_interval_end - output_interval_start)) + output_interval_start
    
im = Image.new("RGB",(350,350))

red = build_random_function(14,18)
green = build_random_function(15,19)
blue = build_random_function(15,20)
pixels = im.load()

for x1 in range(0, 349):
    x = remap_interval(x1, 0, 349, -1, 1)
    for y1 in range(0, 349):
        y = remap_interval(y1, 0, 349, -1, 1)
        r = evaluate_random_function(red, x, y)
        g = evaluate_random_function(green, x, y)
        b = evaluate_random_function(blue, x, y)
        r = int(remap_interval(r, -1, 1, 0, 255))
        g = int(remap_interval(g, -1, 1, 0, 255))
        b = int(remap_interval(b, -1, 1, 0, 255))
        pixels[x1,y1] = (r,g,b)

im.show()
im.save('example2.png')